generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  player
}

enum MatchStatus {
  scheduled
  in_play
  finished
  cancelled
  suspended
  postponed
}

enum Sign {
  ONE
  X
  TWO
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  displayName     String
  role            Role             @default(player)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  predictions     Prediction[]
  exemptions      Exemption[]
  settlementItems SettlementItem[]
}

model Team {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  shortName    String?
  isUnionistas Boolean @default(false)
  homeMatches  Match[] @relation("homeTeam")
  awayMatches  Match[] @relation("awayTeam")
}

model Matchday {
  id          Int          @id @default(autoincrement())
  season      String
  number      Int
  startsAt    DateTime
  matches     Match[]
  settlements Settlement[]
  exemptions  Exemption[]

  @@unique([season, number])
}

model Match {
  id                Int          @id @default(autoincrement())
  matchdayId        Int
  matchday          Matchday     @relation(fields: [matchdayId], references: [id], onDelete: Cascade)
  homeTeamId        Int
  homeTeam          Team         @relation("homeTeam", fields: [homeTeamId], references: [id])
  awayTeamId        Int
  awayTeam          Team         @relation("awayTeam", fields: [awayTeamId], references: [id])
  startsAt          DateTime
  status            MatchStatus  @default(scheduled)
  goalsHome         Int?
  goalsAway         Int?
  federationOutcome Sign?
  predictions       Prediction[]

  @@index([matchdayId])
  @@index([startsAt])
}

model Prediction {
  id        Int      @id @default(autoincrement())
  matchId   Int
  userId    String
  predSign  Sign
  createdAt DateTime @default(now())
  locked    Boolean  @default(false)

  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  match Match            @relation(fields: [matchId], references: [id], onDelete: Cascade)
  score PredictionScore?

  @@unique([matchId, userId])
}

model PredictionScore {
  predictionId Int        @id
  points       Int        @default(0)
  calculatedAt DateTime   @default(now())
  prediction   Prediction @relation(fields: [predictionId], references: [id], onDelete: Cascade)
}

model Exemption {
  id         Int    @id @default(autoincrement())
  userId     String
  matchdayId Int
  amount     Int    @default(3)
  used       Int    @default(0)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchday Matchday @relation(fields: [matchdayId], references: [id], onDelete: Cascade)

  @@unique([userId, matchdayId])
}

model Settlement {
  id         Int      @id @default(autoincrement())
  matchdayId Int
  createdAt  DateTime @default(now())
  totalPool  Decimal  @db.Decimal(6, 2)
  notes      String?

  matchday Matchday         @relation(fields: [matchdayId], references: [id], onDelete: Cascade)
  items    SettlementItem[]
}

model SettlementItem {
  id                 Int     @id @default(autoincrement())
  settlementId       Int
  userId             String
  role               String // 'worst' | 'second_worst'
  amount             Decimal @db.Decimal(6, 2)
  coveredByExemption Boolean @default(false)

  settlement Settlement @relation(fields: [settlementId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}
