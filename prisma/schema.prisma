// prisma/schema.prisma
// ================ Generador y datasource ================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // En producción (Vercel) usas el Pooler en DATABASE_URL
  url       = env("DATABASE_URL")
  // Para introspección/migraciones locales, usa la directa:
  // (si no puedes abrir el 5432 desde tu red, puedes dejarla sin usar)
  directUrl = env("DIRECT_URL")
}

// ====================== Enums ===========================
enum Sign {
  _1
  X
  _2
}

// (Opcional si usas lista blanca con roles simples)
enum AllowedRole {
  admin
  player
}

// (Opcional si decides usar estado de jornada)
enum MatchdayStatus {
  OPEN
  CLOSED
  SETTLED
}

// ====================== Modelos =========================

// Usuario interno (para asociar picks a un email)
model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  displayName String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())

  predictions Prediction[]
  exemptions  Exemption[]
}

// Equipo
model Team {
  id            Int      @id @default(autoincrement())
  name          String
  shortName     String?
  isUnionistas  Boolean  @default(false)

  homeMatches   Match[]  @relation("HomeTeam")
  awayMatches   Match[]  @relation("AwayTeam")
}

// Jornada
model Matchday {
  id        Int             @id @default(autoincrement())
  number    Int
  season    String
  startsAt  DateTime
  status    MatchdayStatus? // si no lo usas, puedes quitarlo
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  matches   Match[]
  // (Las predicciones van por partido; no necesitamos relación directa aquí)
}

// Partido
model Match {
  id          Int       @id @default(autoincrement())
  matchdayId  Int
  homeTeamId  Int
  awayTeamId  Int
  startsAt    DateTime
  result      Sign?

  matchday    Matchday  @relation(fields: [matchdayId], references: [id], onDelete: Cascade)
  homeTeam    Team      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam    Team      @relation("AwayTeam", fields: [awayTeamId], references: [id])
  predictions Prediction[]

  @@index([matchdayId])
  @@index([homeTeamId])
  @@index([awayTeamId])
}

// Predicción de un usuario para un partido
model Prediction {
  id        Int      @id @default(autoincrement())
  userId    Int
  matchId   Int
  predSign  Sign
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId]) // un pick por usuario y partido
}

// Exención de pago tras pleno, etc. (1 por jornada/usuario)
model Exemption {
  id         Int       @id @default(autoincrement())
  userId     Int
  matchdayId Int
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchday   Matchday  @relation(fields: [matchdayId], references: [id], onDelete: Cascade)

  @@unique([userId, matchdayId])
}

// ================= Lista blanca de emails =================
// (Si la usas para controlar quién entra a la app)
model AllowedEmail {
  email     String      @id
  role      AllowedRole @default(player)
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
}

